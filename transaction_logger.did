type AddEvmToIcpTx = record {
  "principal" : principal;
  transaction_hash : text;
  value : nat;
  operator : Operator;
  time : nat;
  subaccount : opt blob;
  erc20_contract_address : text;
  chain_id : nat;
  from_address : text;
  icrc_ledger_id : principal;
  total_gas_spent : nat;
};
type AddEvmToIcpTxError = variant {
  InvalidAddress;
  ChinNotSupported;
  InvalidTokenPairs;
  InvalidTokenContract;
  TxAlreadyExsits;
};
type AddIcpToEvmTx = record {
  destination : text;
  withdrawal_amount : nat;
  from : principal;
  operator : Operator;
  time : nat;
  from_subaccount : opt blob;
  erc20_contract_address : text;
  chain_id : nat;
  max_transaction_fee : nat;
  icrc_ledger_id : principal;
  native_ledger_burn_index : nat;
};
type AddIcpToEvmTxError = variant {
  InvalidDestination;
  ChinNotSupported;
  InvalidTokenPairs;
  InvalidTokenContract;
  TxAlreadyExsits;
};
type CandidAddErc20TwinLedgerSuiteRequest = record {
  status : CandidErc20TwinLedgerSuiteStatus;
  creator : principal;
  icp_ledger_id : opt principal;
  icp_token_name : text;
  created_at : nat64;
  fee_charged : CandidErc20TwinLedgerSuiteFee;
  icp_token_symbol : text;
  evm_token_contract : text;
  evm_token_chain_id : nat;
};
type CandidErc20TwinLedgerSuiteFee = variant { Icp : nat; Appic : nat };
type CandidErc20TwinLedgerSuiteStatus = variant {
  PendingApproval;
  Created;
  Installed;
};
type CandidEvmToIcp = record {
  status : EvmToIcpStatus;
  "principal" : principal;
  verified : bool;
  transaction_hash : text;
  value : nat;
  operator : Operator;
  time : nat64;
  subaccount : opt blob;
  block_number : opt nat;
  erc20_contract_address : text;
  actual_received : opt nat;
  ledger_mint_index : opt nat;
  chain_id : nat;
  from_address : text;
  icrc_ledger_id : opt principal;
  total_gas_spent : opt nat;
};
type CandidEvmToken = record {
  decimals : nat8;
  logo : text;
  name : text;
  erc20_contract_address : text;
  chain_id : nat;
  symbol : text;
};
type CandidIcpToEvm = record {
  effective_gas_price : opt nat;
  status : IcpToEvmStatus;
  erc20_ledger_burn_index : opt nat;
  destination : text;
  verified : bool;
  transaction_hash : opt text;
  withdrawal_amount : nat;
  from : principal;
  operator : Operator;
  time : nat64;
  from_subaccount : opt blob;
  erc20_contract_address : text;
  actual_received : opt nat;
  chain_id : nat;
  max_transaction_fee : opt nat;
  icrc_ledger_id : opt principal;
  gas_used : opt nat;
  total_gas_spent : opt nat;
  native_ledger_burn_index : nat;
};
type CandidIcpToken = record {
  fee : nat;
  decimals : nat8;
  usd_price : text;
  logo : text;
  name : text;
  rank : opt nat32;
  ledger_id : principal;
  token_type : IcpTokenType;
  symbol : text;
};
type CandidLedgerSuiteRequest = record {
  erc20_contract : text;
  status : CandidErc20TwinLedgerSuiteStatus;
  creator : principal;
  evm_token : opt CandidEvmToken;
  created_at : nat64;
  fee_charged : CandidErc20TwinLedgerSuiteFee;
  chain_id : nat;
  icp_token : opt CandidIcpToken;
};
type EvmToIcpStatus = variant {
  Invalid : text;
  PendingVerification;
  Minted;
  Accepted;
  Quarantined;
};
type GetEvmTokenArgs = record { chain_id : nat; address : text };
type GetIcpTokenArgs = record { ledger_id : principal };
type GetTxParams = record {
  chain_id : nat;
  search_param : TransactionSearchParam;
};
type IcpToEvmStatus = variant {
  Failed;
  SignedTransaction;
  ReplacedTransaction;
  QuarantinedReimbursement;
  PendingVerification;
  Accepted;
  Reimbursed;
  Successful;
  Created;
  FinalizedTransaction;
};
type IcpTokenType = variant { ICRC1; ICRC2; ICRC3; DIP20; Other : text };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type InitArgs = record { minters : vec MinterArgs };
type LoggerArgs = variant { Upgrade : UpgradeArg; Init : InitArgs };
type MinterArgs = record {
  last_observed_event : nat;
  last_scraped_event : nat;
  operator : Operator;
  chain_id : nat;
  icp_to_evm_fee : nat;
  evm_to_icp_fee : nat;
  minter_id : principal;
};
type Operator = variant { AppicMinter; DfinityCkEthMinter };
type Result = variant { Ok; Err : AddEvmToIcpTxError };
type Result_1 = variant { Ok; Err : AddIcpToEvmTxError };
type TokenPair = record {
  operator : Operator;
  evm_token : CandidEvmToken;
  icp_token : CandidIcpToken;
};
type Transaction = variant {
  EvmToIcp : CandidEvmToIcp;
  IcpToEvm : CandidIcpToEvm;
};
type TransactionSearchParam = variant {
  TxWithdrawalId : nat;
  TxMintId : nat;
  TxHash : text;
};
type UpdateMinterArgs = record {
  operator : Operator;
  chain_id : nat;
  icp_to_evm_fee : nat;
  evm_to_icp_fee : nat;
  minter_id : principal;
};
type UpgradeArg = record {
  new_minters : opt vec MinterArgs;
  update_minters : opt vec UpdateMinterArgs;
};
service : (LoggerArgs) -> {
  get_bridge_pairs : () -> (vec TokenPair) query;
  get_erc20s_twin_ls_reqests_by_creator : (principal) -> (
      vec CandidLedgerSuiteRequest,
    ) query;
  get_evm_token : (GetEvmTokenArgs) -> (opt CandidEvmToken) query;
  get_icp_token : (GetIcpTokenArgs) -> (opt CandidIcpToken) query;
  get_icp_tokens : () -> (vec CandidIcpToken) query;
  get_transaction : (GetTxParams) -> (opt Transaction) query;
  get_txs_by_address : (text) -> (vec Transaction) query;
  get_txs_by_principal : (principal) -> (vec Transaction) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  new_evm_to_icp_tx : (AddEvmToIcpTx) -> (Result);
  new_icp_to_evm_tx : (AddIcpToEvmTx) -> (Result_1);
  new_twin_ls_request : (CandidAddErc20TwinLedgerSuiteRequest) -> ();
  update_twin_ls_request : (CandidAddErc20TwinLedgerSuiteRequest) -> ();
}
