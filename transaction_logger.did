type AddEvmToIcpTx = record {
  "principal" : principal;
  transaction_hash : text;
  value : nat;
  operator : Operator;
  subaccount : opt blob;
  erc20_contract_address : text;
  chain_id : nat;
  from_address : text;
  icrc_ledger_id : principal;
  total_gas_spent : nat;
};
type AddEvmToIcpTxError = variant {
  InvalidAddress;
  ChainNotSupported;
  InvalidTokenPairs;
  InvalidTokenContract;
  TxAlreadyExists;
};
type AddIcpToEvmTx = record {
  destination : text;
  withdrawal_amount : nat;
  from : principal;
  operator : Operator;
  from_subaccount : opt blob;
  erc20_contract_address : text;
  chain_id : nat;
  max_transaction_fee : nat;
  icrc_ledger_id : principal;
  native_ledger_burn_index : nat;
};
type AddIcpToEvmTxError = variant {
  InvalidDestination;
  ChainNotSupported;
  InvalidTokenPairs;
  InvalidTokenContract;
  TxAlreadyExists;
};
type CandidDexAction = variant {
  Swap : record {
    token_in : principal;
    final_amount_in : nat;
    final_amount_out : nat;
    timestamp : nat64;
    token_out : principal;
    swap_type : CandidSwapType;
  };
  CreatedPool : record {
    token0 : principal;
    token1 : principal;
    timestamp : nat64;
    pool_fee : nat32;
  };
  BurntPosition : record {
    amount0_received : nat;
    burnt_position : CandidPositionKey;
    liquidity : nat;
    timestamp : nat64;
    amount1_received : nat;
  };
  IncreasedLiquidity : record {
    amount0_paid : nat;
    liquidity_delta : nat;
    amount1_paid : nat;
    timestamp : nat64;
    modified_position : CandidPositionKey;
  };
  CollectedFees : record {
    amount1_collected : nat;
    timestamp : nat64;
    position : CandidPositionKey;
    amount0_collected : nat;
  };
  DecreasedLiquidity : record {
    amount0_received : nat;
    liquidity_delta : nat;
    timestamp : nat64;
    amount1_received : nat;
    modified_position : CandidPositionKey;
  };
  MintedPosition : record {
    amount0_paid : nat;
    liquidity : nat;
    created_position : CandidPositionKey;
    amount1_paid : nat;
    timestamp : nat64;
  };
};
type CandidEvmToIcp = record {
  status : EvmToIcpStatus;
  "principal" : principal;
  verified : bool;
  transaction_hash : text;
  value : nat;
  operator : Operator;
  time : nat64;
  subaccount : opt blob;
  block_number : opt nat;
  erc20_contract_address : text;
  actual_received : opt nat;
  ledger_mint_index : opt nat;
  chain_id : nat;
  from_address : text;
  icrc_ledger_id : opt principal;
  total_gas_spent : opt nat;
};
type CandidEvmToken = record {
  decimals : nat8;
  usd_price : opt text;
  logo : text;
  name : text;
  erc20_contract_address : text;
  chain_id : nat;
  cmc_id : opt nat;
  volume_usd_24h : opt text;
  is_wrapped_icrc : bool;
  symbol : text;
};
type CandidIcpToEvm = record {
  effective_gas_price : opt nat;
  status : IcpToEvmStatus;
  erc20_ledger_burn_index : opt nat;
  destination : text;
  verified : bool;
  transaction_hash : opt text;
  withdrawal_amount : nat;
  from : principal;
  operator : Operator;
  time : nat64;
  from_subaccount : opt blob;
  erc20_contract_address : text;
  actual_received : opt nat;
  chain_id : nat;
  max_transaction_fee : opt nat;
  icrc_ledger_id : opt principal;
  gas_used : opt nat;
  total_gas_spent : opt nat;
  native_ledger_burn_index : nat;
};
type CandidIcpToken = record {
  fee : nat;
  decimals : nat8;
  listed_on_appic_dex : opt bool;
  usd_price : text;
  logo : text;
  name : text;
  rank : opt nat32;
  ledger_id : principal;
  token_type : IcpTokenType;
  symbol : text;
};
type CandidPoolId = record {
  fee : nat;
  token0 : principal;
  token1 : principal;
};
type CandidPositionKey = record {
  owner : principal;
  tick_lower : int;
  pool_id : CandidPoolId;
  tick_upper : int;
};
type CandidSwapType = variant {
  ExactOutput : vec CandidPoolId;
  ExactInput : vec CandidPoolId;
  ExactOutputSingle : CandidPoolId;
  ExactInputSingle : CandidPoolId;
};
type EvmSearchQuery = record { "query" : text; chain_id : nat64 };
type EvmToIcpStatus = variant {
  Invalid : text;
  PendingVerification;
  Minted;
  Accepted;
  Quarantined;
};
type GetEvmTokenArgs = record { chain_id : nat; address : text };
type GetIcpTokenArgs = record { ledger_id : principal };
type GetTxParams = record {
  chain_id : nat;
  search_param : TransactionSearchParam;
};
type IcpToEvmStatus = variant {
  Failed;
  SignedTransaction;
  ReplacedTransaction;
  QuarantinedReimbursement;
  PendingVerification;
  Accepted;
  Reimbursed;
  Successful;
  Created;
};
type IcpTokenType = variant { ICRC1; ICRC2; ICRC3; DIP20; Other : text };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type InitArgs = record { minters : vec MinterArgs };
type LoggerArgs = variant { Upgrade : UpgradeArg; Init : InitArgs };
type MinterArgs = record {
  last_observed_event : nat;
  last_scraped_event : nat;
  operator : Operator;
  chain_id : nat;
  minter_id : principal;
};
type Operator = variant { AppicMinter; DfinityCkEthMinter };
type Result = variant { Ok; Err : AddEvmToIcpTxError };
type Result_1 = variant { Ok; Err : AddIcpToEvmTxError };
type TokenPair = record {
  operator : Operator;
  evm_token : CandidEvmToken;
  icp_token : CandidIcpToken;
};
type TopVolumeTokens = record { chain : nat64; tokens : vec CandidEvmToken };
type Transaction = variant {
  DexAction : CandidDexAction;
  EvmToIcp : CandidEvmToIcp;
  IcpToEvm : CandidIcpToEvm;
};
type TransactionSearchParam = variant {
  TxWithdrawalId : nat;
  TxMintId : nat;
  TxHash : text;
};
type UpdateMinterArgs = record {
  last_observed_event : opt nat;
  last_scraped_event : opt nat;
  operator : Operator;
  chain_id : nat;
  minter_id : principal;
};
type UpgradeArg = record {
  update_latest_observed_dex_event : opt nat;
  update_latest_scraped_dex_event : opt nat;
  new_minters : opt vec MinterArgs;
  update_minters : opt vec UpdateMinterArgs;
};
service : (LoggerArgs) -> {
  add_evm_token : (CandidEvmToken) -> ();
  add_icp_token : (CandidIcpToken) -> ();
  get_bridge_pairs : () -> (vec TokenPair) query;
  get_dex_actions_for_principal : (principal) -> (vec CandidDexAction) query;
  get_evm_token : (GetEvmTokenArgs) -> (opt CandidEvmToken) query;
  get_icp_token : (GetIcpTokenArgs) -> (opt CandidIcpToken) query;
  get_icp_tokens : () -> (vec CandidIcpToken) query;
  get_minters : () -> (vec MinterArgs) query;
  get_top_100_tokens_by_volume_per_chain : () -> (vec TopVolumeTokens) query;
  get_transaction : (GetTxParams) -> (opt Transaction) query;
  get_txs_by_address : (text) -> (vec Transaction) query;
  get_txs_by_address_principal_combination : (text, principal) -> (
      vec Transaction,
    ) query;
  get_txs_by_principal : (principal) -> (vec Transaction) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  new_evm_to_icp_tx : (AddEvmToIcpTx) -> (Result);
  new_icp_to_evm_tx : (AddIcpToEvmTx) -> (Result_1);
  request_update_bridge_pairs : () -> ();
  search_evm_token : (EvmSearchQuery) -> (vec CandidEvmToken) query;
  update_evm_token_price_volume : (vec record { nat64; text; text }) -> ();
}
